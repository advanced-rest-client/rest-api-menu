/**
 * DO NOT EDIT
 *
 * This file was automatically generated by
 *   https://github.com/Polymer/tools/tree/master/packages/gen-typescript-declarations
 *
 * To modify these typings, edit the source file(s):
 *   rest-api-menu.js
 */


// tslint:disable:variable-name Describing an API that's defined elsewhere.
// tslint:disable:no-any describes the API as best we are able today

declare namespace UiElements {

  /**
   * A quick access menu for REST API projects
   *
   * A list of REST APIs in the ARC main menu.
   * The element uses direct implementation of the PouchDB to make a query to the
   * datastore.
   * It also listens to `datastore-destroyed` custom event update state of the list
   * items when datastore was destroyed.
   *
   * It listens for `selected-rest-api-changed` custom event as an alternative
   * to setting `selectedApi` property directly on the element.
   *
   * ### Example
   *
   * ```html
   * <rest-api-menu selected-api="[[route.api]]"></rest-api-menu>
   * ```
   *
   * ### Datastore access
   *
   * This element uses events API to access datastore data. This is provided by the
   * `arc-models/rest-api-model` element. See documentation for this element if you
   * need to implement own data exchange logic.
   *
   * Datastore element is not in the shadow DOM of this element and is should be
   * included in the application DOM.
   *
   * ```html
   * <link rel="import" href="bower_components/arc-models/rest-api-model.html">
   * <link rel="import" href="bower_components/rest-api-menu/rest-api-menu.html">
   * <rest-api-menu selected-api="[[route.api]]"></rest-api-menu>
   * <rest-api-model></rest-api-model>
   * ```
   *
   * ### Styling
   * `<rest-api-menu>` provides the following custom properties and mixins for styling:
   *
   * Custom property | Description | Default
   * ----------------|-------------|----------
   * `--rest-api-menu-background-color` | Background color of the menu | `inherit`
   * `--rest-api-menu-selected-item-background-color` | Background color of the selected list item | `rgba(255, 152, 0, 0.24)`
   * `--arc-menu-empty-info-color` | Color applied to the empty info section | ``
   * `--arc-menu-empty-info-title-color` | Color applied to the title in the empty info section | ``
   */
  class RestApiMenu extends
    ArcFileDropMixin(
    Object) {

    /**
     * Saved items restored from the datastore.
     */
    items: Array<object|null>|null;

    /**
     * True when the element is querying the database for the data.
     */
    readonly querying: boolean|null|undefined;

    /**
     * Computed value. `true` if the `items` property has values.
     */
    readonly hasItems: boolean|null|undefined;

    /**
     * Computed value. True if query ended and there's no results.
     */
    readonly dataUnavailable: boolean|null|undefined;

    /**
     * Currently selected project ID
     */
    selectedApi: string|null|undefined;

    /**
     * Page token for datastore pagination
     */
    nextPageToken: string|null|undefined;

    /**
     * When set the element won't query for APIs data when connected to the DOM.
     * In this case manually call `makeQuery()`
     */
    noAutoQuery: boolean|null|undefined;
    connectedCallback(): void;
    disconnectedCallback(): void;

    /**
     * Resets the state of the variables.
     */
    reset(): void;

    /**
     * Refreshes the data from the datastore.
     * It resets the query options, clears items and makes a query to the datastore.
     */
    refresh(): void;

    /**
     * Handler for the `datastore-destroyed` custom event
     */
    _onDatabaseDestroy(e: any): void;

    /**
     * Computes class name for the HTML element representing a saved item.
     *
     * @param id An id to compare
     * @param selectedProject Currently selected API id
     */
    _computeItemClass(id: String|null, selectedProject: String|null): String|null;

    /**
     * Computes value for the `hasItems` property.
     */
    _computeHasItems(length: any): any;

    /**
     * The function to call when new query for data is needed.
     * Use this intead of `loadPage()` as this function uses debouncer to
     * prevent multiple calls at once.
     */
    makeQuery(): void;
    _dispatchApiList(detail: any): any;
    _getApiListDetail(): any;

    /**
     * Performs the query and processes the result.
     * This function immediately queries the data model for data.
     * It does this in a loop until all data are read.
     */
    loadPage(): Promise<any>|null;
    _renderList(): void;

    /**
     * Sorts projects list by `order` and the `title` properties.
     */
    _sortData(a: object|null, b: object|null): Number|null;

    /**
     * Computes value for the `dataUnavailable` property.
     */
    _computeDataUnavailable(hasItems: any, querying: any): any;

    /**
     * Handler for the `tap` event on the item.
     */
    _openAPI(e: any): void;

    /**
     * Handler for the `selected-rest-api-changed` event.
     * It expects the detail object to have `value` property with selection id.
     */
    _selecteApiHandler(e: CustomEvent|null): void;

    /**
     * Index item has been changed and should be updated / added.
     * Only non-cancelable event is considered.
     */
    _indexUpdated(e: CustomEvent|null): void;

    /**
     * Handler for API delete event.
     * Only non-cancelable event is considered.
     */
    _indexDeleted(e: CustomEvent|null): void;
  }
}

declare global {

  interface HTMLElementTagNameMap {
    "rest-api-menu": UiElements.RestApiMenu;
  }
}

export {};
